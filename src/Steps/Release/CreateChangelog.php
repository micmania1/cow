<?php

namespace SilverStripe\Cow\Steps\Release;

use Exception;
use SilverStripe\Cow\Commands\Command;
use SilverStripe\Cow\Model\Changelog;
use SilverStripe\Cow\Model\ReleaseVersion;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

/**
 * Creates a new changelog
 */
class CreateChangelog extends ModuleStep
{
    /**
     * @var ReleaseVersion
     */
    protected $version;

    /**
     *
     * @var ReleaseVersion
     */
    protected $from;

    /**
     * Paths to check for changelog folder
     *
     * @var array
     */
    protected $paths = array(
        "framework/docs/en/04_Changelogs",
        "framework/docs/en/changelogs",
        "sapphire/docs/en/changelogs"
    );

    /**
     * Below this line, any text will be automatically regenerated
     *
     * @var string
     */
    protected $autogeneratedDelimeter = "<!--- Changes below this line will be automatically regenerated -->";

    /**
     * Create a changelog command
     *
     * @param Command $command
     * @param ReleaseVersion $version
     * @param ReleaseVersion $from
     * @param string $directory
     * @param array $modules Optional list of modules to limit changelog source to
     * @param bool $listIsExclusive If this list is exclusive. If false, this is inclusive
     */
    public function __construct(
        Command $command,
        ReleaseVersion $version,
        ReleaseVersion $from,
        $directory = '.',
        $modules = array(),
        $listIsExclusive = false
    ) {
        parent::__construct($command, $directory, $modules, $listIsExclusive);
        $this->version = $version;
        $this->from = $from;
    }

    public function run(InputInterface $input, OutputInterface $output)
    {
        $this->log($output, "Generating changelog content");

        // Generate changelog content
        $changelog = new Changelog($this->getModules(), $this->from);
        $content = $changelog->getMarkdown($output, Changelog::FORMAT_GROUPED);

        // Now we need to merge this content with the file, or otherwise create it
        $path = $this->getChangelogPath();
        $this->writeChangelog($output, $content, $path);

        // Now commit to git (but don't push!)
        $this->commitChanges($output, $path);

        $this->log($output, "Changelog successfully saved!");
    }

    /**
     * Get full path to this changelog
     *
     * @return string
     */
    protected function getChangelogPath()
    {
        $folder = $this->getChangelogFolder();

        // Suffix for release
        $suffix = $this->version->getStability();
        if ($suffix) {
            $folder .= DIRECTORY_SEPARATOR . $suffix;
        }

        return $folder . DIRECTORY_SEPARATOR . $this->version->getValue() . ".md";
    }

    /**
     * Find best changelog folder for this repo
     *
     * @return string
     * @throws Exception
     */
    protected function getChangelogFolder()
    {
        $root = $this->getProject()->getDirectory();

        foreach ($this->paths as $path) {
            $directory = realpath($root . DIRECTORY_SEPARATOR . $path);
            if (is_dir($directory)) {
                return $directory;
            }
        }

        throw new Exception("Could not find changelog folder in project {$root}");
    }

    /**
     * Save output to disk
     *
     * @param OutputInterface $output
     * @param string $content
     * @param string $path
     */
    protected function writeChangelog(OutputInterface $output, $content, $path)
    {
        $header = $this->getFileHeader($output, $path);
        file_put_contents($path, $header.$content);
    }

    /**
     * Get header component to put before the changelog content
     *
     * @param OutputInterface $output
     * @param string $path File path to check for existing header
     * @return string
     */
    protected function getFileHeader(OutputInterface $output, $path)
    {
        // Generate new header if no file exists
        if (!file_exists($path)) {
            $this->log($output, "Writing changelog to <info>$path</info>");
            return "# " . $this->version->getValue() . "\n\n" . $this->autogeneratedDelimeter;
        }

        // Given an existing file, attempt to regenerate autogenerated component
        $this->log($output, "<info>$path</info> already exists; Merging changes");
        $content = file_get_contents($path);
        $position = stripos($content, $this->autogeneratedDelimeter);
        if ($position === false) {
            $this->log(
                $output,
                "Warning: autogeneration delimiter could not be found in this file. Content will be appended instead",
                "error"
            );
        } else {
            $content = substr($content, 0, $position);
        }
        return $content . $this->autogeneratedDelimeter;
    }

    public function getStepName()
    {
        return 'changelog';
    }

    /**
     * Commit changes to git
     *
     * @param OutputInterface $output
     * @param string $path
     * @throws Exception
     */
    public function commitChanges(OutputInterface $output, $path)
    {
        $this->log($output, 'Committing changes to git');

        // Get framework to commit to
        $framework = $this->getProject()->getModule('framework');
        if (!$framework) {
            $framework = $this->getProject()->getModule('sapphire');
            if (!$framework) {
                throw new Exception("Could not find module framework in project " . $this->getProject()->getDirectory());
            }
        }
        $repo = $framework->getRepository();

        // Write changes to git
        $repo->run("add", array($path));
        $version = $this->version->getValue();
        $repo->run("commit", array("-m", "Added {$version} changelog"));
    }
}
